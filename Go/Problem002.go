/* Project Euler Problem 002
 * Code created by Brandon Gilliam
 *
 * Problem:
 * Each new term in the Fibonacci sequence is generated by adding the previous
 * two terms.  By starting with 1 and 2, the first 10 terms will be:
 *                  1, 2, 3, 5, 8, 13, 21, 34, 55, 89
 * By considering the terms in the Fibonacci sequence whose values do not
 * exceed four million, find the sum of the even-valued terms.
 *
 * Solution:
 * I used Go's closure functions to create the fibonacci() function, which
 * returns a function that computes the next two values and then returns
 * the first of which is used.  By statting it at 0 and 1, it will report
 * the fibonacci sequence starting with 1 and 2 just as the problem was stated.
 * The closure function is used to iterate through the values, until it finds a
 * value f such that f >= 4000000.  Each of the values computed is checked if
 * it is even through checking if i % 2 is 0, and it if is, the value is summed
 * and at the end printed to the console.
 *
 * Improvements:
 * It would be interesting to have the program read the upper bound from the
 * command line to determine where to stop, instead of the constant value of
 * four million.
 */
 
package main
import (
    "fmt"
)

func fibonacci() func() int {
    x, y := 0, 1
    return func() int {
        x, y = y, x + y
        return x
    }
}

func main() {
    sum, fib := 0, fibonacci()
    for i := fib(); i < 4000000; i = fib() {
        if (i % 2 == 0) {
            sum += i
        }
    }
    fmt.Printf("%d", sum)
}